# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: rjdrk25
service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs20.x
  apiGateway:
    apiKeys:
      - crud-serverless-users-apikey
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:733354705166:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::bucket-serverless-rjuarez-01/*
  environment:
    BUCKET: bucket-serverless-rjuarez-01
    SECRET_EGG: ${ssm:/SECRET_EGG}

plugins:
  - serverless-offline
  - serverless-dynamodb
  - serverless-lift

package:
  individually: true
  patterns:
    - "!*/**"
    - "!**"

custom:
  serverless-dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  apiGatewayServiceProxies:
    - sqs:
        path: /likeUser
        method: post
        queueName: likeQueue
        cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message": "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }

constructs:
  sqs-queue:
    type: queue
    batchSize: 1
    worker:
      handler: likeUser/handler.likeUser
      reservedConcurrency: 1
      layers:
        - arn:aws:lambda:us-east-1:733354705166:layer:aws-sdk:1
      package:
        patterns:
          - "likeUser/handler.js"
    extensions:
      queue:
        Properties:
          QueueName: likeQueue

functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - "authorizer/handler.js"
  get-users:
    handler: getUsers/handler.getUsers
    layers:
      - arn:aws:lambda:us-east-1:733354705166:layer:aws-sdk:1
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          private: true
          path: users/{id}
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    layers:
      - arn:aws:lambda:us-east-1:733354705166:layer:aws-sdk:1
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          private: true
          path: users
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    layers:
      - arn:aws:lambda:us-east-1:733354705166:layer:aws-sdk:1
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          private: true
          path: users/{id}
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.12
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          private: true
          path: users/{id}
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signed-url:
    handler: signedURL/handler.signedS3URL
    layers:
      - arn:aws:lambda:us-east-1:733354705166:layer:aws-sdk:1
    package:
      patterns:
        - "signedURL/handler.js"
    events:
      - http:
          private: true
          path: signedURL
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: GET
          request:
            parameters:
              querystrings:
                fileName: true
  thumb-generator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
      - arn:aws:lambda:us-east-1:733354705166:layer:aws-sdk:1
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: bucket-serverless-rjuarez-01
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/
layers:
  base:
    name: "prd-dependencies"
    compatibleRuntimes:
      - nodejs20.x
    package:
      artifact: app/nodejs.zip
          
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        BucketName: bucket-serverless-rjuarez-01
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'
      
